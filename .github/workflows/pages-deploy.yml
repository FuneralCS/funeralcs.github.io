name: Build and Deploy
on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - .gitignore
      - README.md
      - LICENSE
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

# Sadece bir deploy’ın aynı anda çalışmasını sağlar
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true

      - name: Build site
        run: bundle exec jekyll b -d "_site${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: "production"

      - name: Test site
        run: |
          bundle exec htmlproofer _site \
          --disable-external \
          --ignore-urls "/^http:\/\/127\.0\.0\.1/,/^http:\/\/0\.0\.0\.0/,/^http:\/\/localhost/,/\/en\/$/"

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site${{ steps.pages.outputs.base_path }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # 1) Repo’yu çekiyoruz ki hem deploy hem commit adımları çalışsın
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) Deploy adımı
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      # fetch
      - name: Load notified_posts.json from notifications branch
        run: |
          # notifications branch’ini fetch et
          git fetch origin notifications
          # Eğer dosya varsa al, yoksa boş bir JSON oluştur
          git checkout origin/notifications -- notified_posts.json 2>/dev/null || echo '[]' > notified_posts.json
          
      # 3) Feed’i çek, yeni başlık varsa OneSignal’a gönder, sonra listeyi güncelle
      - name: Fetch feed & send OneSignal notification
        env:
          ONESIGNAL_APP_ID:        ${{ secrets.ONESIGNAL_APP_ID }}
          ONESIGNAL_REST_API_KEY:  ${{ secrets.ONESIGNAL_REST_API_KEY }}
        run: |
          python3 - <<'EOF'
          import os, json, sys, urllib.request
          from xml.etree import ElementTree as ET
          from urllib.error import HTTPError

          FEED_URL  = 'https://funeralcs.com/feed.xml'
          SEEN_FILE = 'notified_posts.json'

          # Secrets’i al
          APP_ID   = os.environ['ONESIGNAL_APP_ID']
          REST_KEY = os.environ['ONESIGNAL_REST_API_KEY']

          # 1) Feed’i çek ve parse et
          data = urllib.request.urlopen(FEED_URL).read()
          root = ET.fromstring(data)
          ns   = {'atom': 'http://www.w3.org/2005/Atom'}
          entries = root.findall('atom:entry', ns)
          if not entries:
              print('⚠️ Feed boş, çıkılıyor.')
              sys.exit(0)

          latest = entries[0]
          title  = latest.find('atom:title', ns).text
          link   = latest.find('atom:link', ns).attrib['href']

          # 2) Daha önce görülenleri oku
          if os.path.exists(SEEN_FILE):
              seen = json.load(open(SEEN_FILE))
          else:
              seen = []

          if title in seen:
              print('🔁 Zaten bildirildi:', title)
              sys.exit(0)

          # 3) OneSignal’a bildirim isteği yap
          payload = {
              "app_id": APP_ID,
              "included_segments": ["All"],
              "headings": {"en": title},
              "contents": {"en": "FuneralCS’te yeni bir gönderi yayınlandı!"},
              "url": link
          }
          req = urllib.request.Request(
              "https://onesignal.com/api/v1/notifications",
              data=json.dumps(payload).encode('utf-8'),
              headers={
                  "Authorization": f"Basic {REST_KEY}",
                  "Content-Type": "application/json"
              }
          )
          try:
              resp = urllib.request.urlopen(req)
              print("✅ Bildirim gönderildi:", resp.status, resp.read().decode())
          except HTTPError as e:
              err = e.read().decode()
              print(f"❌ OneSignal Hatası {e.code}: {err}")
              sys.exit(1)

          # 4) Görülenler listesine ekle ve kaydet
          seen.append(title)
          with open(SEEN_FILE, 'w') as f:
              json.dump(seen, f)
          EOF

      # 4) Eğer notified_posts.json değiştiyse, notifications branch’ine commit et
        # 4) Eğer notified_posts.json değiştiyse, notifications branch’ine commit et
      - name: Commit notified list to `notifications` branch
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
    
          # 1) Remote notifications dalını çek (varsa)
          git fetch origin notifications || true
    
          # 2) Yeni dosyayı güvene al
          mv notified_posts.json /tmp/notified_posts.json
    
          # 3) notifications dalına geç (lokalde varsa direkt, yoksa origin’den çek)
          if git show-ref --verify --quiet refs/heads/notifications; then
            git checkout notifications
          elif git ls-remote --exit-code --heads origin notifications; then
            git checkout -b notifications origin/notifications
          else
            git checkout -b notifications
          fi
    
          # 4) Güncellenmiş listeyi geri getir
          mv /tmp/notified_posts.json notified_posts.json
    
          # 5) Commit & push
          git add notified_posts.json
          if ! git diff --cached --quiet; then
            git commit -m "Update notified posts list"
            git push origin notifications
          else
            echo "✔️ Bildirim listesi değişmemiş."
          fi
